/* Generated by Yosys 0.36+42 (git sha1 70d35314d, clang 11.0.1-2 -fPIC -Os) */

module ex_1(clk_in, sreset_in, a_in, vhdl_assert_out, \psl_assert.EN , \psl_assert.A );
  (* unused_bits = "2" *)
  reg [2:0] _00_ = 3'h1;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* unused_bits = "1 2 3 4 5 6 7" *)
  reg [7:0] a_d1;
  input [7:0] a_in;
  wire [7:0] a_in;
  input clk_in;
  wire clk_in;
  output \psl_assert.A ;
  wire \psl_assert.A ;
  output \psl_assert.EN ;
  wire \psl_assert.EN ;
  input sreset_in;
  wire sreset_in;
  reg start = 1'h1;
  reg start_d1 = 1'h0;
  output vhdl_assert_out;
  wire vhdl_assert_out;
  assign _08_ = _00_[0] & _01_;
  assign _09_ = _00_[1] & a_in[0];
  assign _10_ = _08_ | _09_;
  assign \psl_assert.A  = ~ _10_;
  assign _02_ = a_in[0] ? 1'h1 : 1'h0;
  assign _03_ = start ? _02_ : 1'h1;
  assign _01_ = ~ a_in[0];
  assign _04_ = _01_ & a_d1[0];
  assign _05_ = ~ _04_;
  assign vhdl_assert_out = _06_ ? 1'h0 : _03_;
  assign _06_ = _05_ & start_d1;
  always @(posedge clk_in)
    _00_ <= { _10_, _07_, 1'h0 };
  always @(posedge clk_in)
    start <= 1'h0;
  always @(posedge clk_in)
    start_d1 <= start;
  always @(posedge clk_in)
    a_d1 <= a_in;
  assign _07_ = _00_[0] & a_in[0];
  assign \psl_assert.EN  = 1'h1;
endmodule
